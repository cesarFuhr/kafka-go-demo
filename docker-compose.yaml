services:
  consumer_1:
    build:
      context: .
      target: consumer
    networks:
      - common-net
    environment:
      - MAIN_CONSUMER_GROUP_NAME=first_consumer_group
      - MAIN_CONSUMER_GROUP_SIZE=${MAIN_CONSUMER_GROUP_SIZE}
      - MAIN_CONSUMER_MAX_WAIT_IN_MILLISECONDS=${MAIN_CONSUMER_MAX_WAIT_IN_MILLISECONDS}
      - MAIN_CONSUMER_MAX_WORK_IN_MILLISECONDS=${MAIN_CONSUMER_MAX_WORK_IN_MILLISECONDS}
      - MAIN_CONSUMER_FAIL_PERCENTAGE=${MAIN_CONSUMER_FAIL_PERCENTAGE}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy

  consumer_2:
    build:
      context: .
      target: consumer
    networks:
      - common-net
    environment:
      - MAIN_CONSUMER_GROUP_NAME=second_consumer_group
      - MAIN_CONSUMER_GROUP_SIZE=${MAIN_CONSUMER_GROUP_SIZE}
      - MAIN_CONSUMER_MAX_WAIT_IN_MILLISECONDS=${MAIN_CONSUMER_MAX_WAIT_IN_MILLISECONDS}
      - MAIN_CONSUMER_MAX_WORK_IN_MILLISECONDS=${MAIN_CONSUMER_MAX_WORK_IN_MILLISECONDS}
      - MAIN_CONSUMER_FAIL_PERCENTAGE=${MAIN_CONSUMER_FAIL_PERCENTAGE}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy

  retrier:
    build:
      context: .
      target: retrier
    networks:
      - common-net
    environment:
      - RETRY_CONSUMER_MAIN_TOPIC=retry-topic
      - RETRY_CONSUMER_GROUP_SIZE=${RETRY_CONSUMER_GROUP_SIZE}
      - RETRY_CONSUMER_MAX_WAIT_IN_MILLISECONDS=${RETRY_CONSUMER_MAX_WAIT_IN_MILLISECONDS}
      - RETRY_CONSUMER_MAX_WORK_IN_MILLISECONDS=${RETRY_CONSUMER_MAX_WORK_IN_MILLISECONDS}
      - RETRY_CONSUMER_FAIL_PERCENTAGE=${RETRY_CONSUMER_FAIL_PERCENTAGE}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy

  producer:
    build:
      context: .
      target: producer
    networks:
      - common-net
    depends_on:
      kafka:
        condition: service_healthy

  retrier_producer:
    build:
      context: .
      target: retrier_producer
    networks:
      - common-net
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy

  db:
    image: postgres:14
    networks:
      - common-net
    environment:
      - POSTGRES_PASSWORD=root
    healthcheck:
      test: ["CMD", "pg_isready", "--username", "postgres"]
      interval: 1s
      retries: 120
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  kafka:
    image: 'bitnami/kafka:3.9'
    ports:
      - "9092"
      - "9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_TLS_CLIENT_AUTH=none
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks: 
      - common-net
    volumes:
      - 'kafka_data:/bitnami/kafka'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --describe",
        ]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 2s

networks:
  common-net:
    driver: bridge

volumes:
  kafka_data:
  pg_data:
